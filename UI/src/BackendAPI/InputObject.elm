-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BackendAPI.InputObject exposing (..)

import BackendAPI.Enum.Order_by
import BackendAPI.Enum.Todo_constraint
import BackendAPI.Enum.Todo_update_column
import BackendAPI.Interface
import BackendAPI.Object
import BackendAPI.Scalar
import BackendAPI.ScalarCodecs
import BackendAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildInt_comparison_exp :
    (Int_comparison_expOptionalFields -> Int_comparison_expOptionalFields)
    -> Int_comparison_exp
buildInt_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Int_comparison_expOptionalFields =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Type for the Int\_comparison\_exp input object.
-}
type alias Int_comparison_exp =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Encode a Int\_comparison\_exp into a value that can be used as an argument.
-}
encodeInt_comparison_exp : Int_comparison_exp -> Value
encodeInt_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.int |> Encode.optional input____.eq_ ), ( "_gt", Encode.int |> Encode.optional input____.gt_ ), ( "_gte", Encode.int |> Encode.optional input____.gte_ ), ( "_in", (Encode.int |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", Encode.int |> Encode.optional input____.lt_ ), ( "_lte", Encode.int |> Encode.optional input____.lte_ ), ( "_neq", Encode.int |> Encode.optional input____.neq_ ), ( "_nin", (Encode.int |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildString_comparison_exp :
    (String_comparison_expOptionalFields -> String_comparison_expOptionalFields)
    -> String_comparison_exp
buildString_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, ilike_ = Absent, in_ = Absent, iregex_ = Absent, is_null_ = Absent, like_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nilike_ = Absent, nin_ = Absent, niregex_ = Absent, nlike_ = Absent, nregex_ = Absent, nsimilar_ = Absent, regex_ = Absent, similar_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, ilike_ = optionals____.ilike_, in_ = optionals____.in_, iregex_ = optionals____.iregex_, is_null_ = optionals____.is_null_, like_ = optionals____.like_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nilike_ = optionals____.nilike_, nin_ = optionals____.nin_, niregex_ = optionals____.niregex_, nlike_ = optionals____.nlike_, nregex_ = optionals____.nregex_, nsimilar_ = optionals____.nsimilar_, regex_ = optionals____.regex_, similar_ = optionals____.similar_ }


type alias String_comparison_expOptionalFields =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Type for the String\_comparison\_exp input object.
-}
type alias String_comparison_exp =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Encode a String\_comparison\_exp into a value that can be used as an argument.
-}
encodeString_comparison_exp : String_comparison_exp -> Value
encodeString_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.string |> Encode.optional input____.eq_ ), ( "_gt", Encode.string |> Encode.optional input____.gt_ ), ( "_gte", Encode.string |> Encode.optional input____.gte_ ), ( "_ilike", Encode.string |> Encode.optional input____.ilike_ ), ( "_in", (Encode.string |> Encode.list) |> Encode.optional input____.in_ ), ( "_iregex", Encode.string |> Encode.optional input____.iregex_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_like", Encode.string |> Encode.optional input____.like_ ), ( "_lt", Encode.string |> Encode.optional input____.lt_ ), ( "_lte", Encode.string |> Encode.optional input____.lte_ ), ( "_neq", Encode.string |> Encode.optional input____.neq_ ), ( "_nilike", Encode.string |> Encode.optional input____.nilike_ ), ( "_nin", (Encode.string |> Encode.list) |> Encode.optional input____.nin_ ), ( "_niregex", Encode.string |> Encode.optional input____.niregex_ ), ( "_nlike", Encode.string |> Encode.optional input____.nlike_ ), ( "_nregex", Encode.string |> Encode.optional input____.nregex_ ), ( "_nsimilar", Encode.string |> Encode.optional input____.nsimilar_ ), ( "_regex", Encode.string |> Encode.optional input____.regex_ ), ( "_similar", Encode.string |> Encode.optional input____.similar_ ) ]


buildTodo_aggregate_order_by :
    (Todo_aggregate_order_byOptionalFields -> Todo_aggregate_order_byOptionalFields)
    -> Todo_aggregate_order_by
buildTodo_aggregate_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { avg = Absent, count = Absent, max = Absent, min = Absent, stddev = Absent, stddev_pop = Absent, stddev_samp = Absent, sum = Absent, var_pop = Absent, var_samp = Absent, variance = Absent }
    in
    { avg = optionals____.avg, count = optionals____.count, max = optionals____.max, min = optionals____.min, stddev = optionals____.stddev, stddev_pop = optionals____.stddev_pop, stddev_samp = optionals____.stddev_samp, sum = optionals____.sum, var_pop = optionals____.var_pop, var_samp = optionals____.var_samp, variance = optionals____.variance }


type alias Todo_aggregate_order_byOptionalFields =
    { avg : OptionalArgument Todo_avg_order_by
    , count : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , max : OptionalArgument Todo_max_order_by
    , min : OptionalArgument Todo_min_order_by
    , stddev : OptionalArgument Todo_stddev_order_by
    , stddev_pop : OptionalArgument Todo_stddev_pop_order_by
    , stddev_samp : OptionalArgument Todo_stddev_samp_order_by
    , sum : OptionalArgument Todo_sum_order_by
    , var_pop : OptionalArgument Todo_var_pop_order_by
    , var_samp : OptionalArgument Todo_var_samp_order_by
    , variance : OptionalArgument Todo_variance_order_by
    }


{-| Type for the Todo\_aggregate\_order\_by input object.
-}
type alias Todo_aggregate_order_by =
    { avg : OptionalArgument Todo_avg_order_by
    , count : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , max : OptionalArgument Todo_max_order_by
    , min : OptionalArgument Todo_min_order_by
    , stddev : OptionalArgument Todo_stddev_order_by
    , stddev_pop : OptionalArgument Todo_stddev_pop_order_by
    , stddev_samp : OptionalArgument Todo_stddev_samp_order_by
    , sum : OptionalArgument Todo_sum_order_by
    , var_pop : OptionalArgument Todo_var_pop_order_by
    , var_samp : OptionalArgument Todo_var_samp_order_by
    , variance : OptionalArgument Todo_variance_order_by
    }


{-| Encode a Todo\_aggregate\_order\_by into a value that can be used as an argument.
-}
encodeTodo_aggregate_order_by : Todo_aggregate_order_by -> Value
encodeTodo_aggregate_order_by input____ =
    Encode.maybeObject
        [ ( "avg", encodeTodo_avg_order_by |> Encode.optional input____.avg ), ( "count", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.count ), ( "max", encodeTodo_max_order_by |> Encode.optional input____.max ), ( "min", encodeTodo_min_order_by |> Encode.optional input____.min ), ( "stddev", encodeTodo_stddev_order_by |> Encode.optional input____.stddev ), ( "stddev_pop", encodeTodo_stddev_pop_order_by |> Encode.optional input____.stddev_pop ), ( "stddev_samp", encodeTodo_stddev_samp_order_by |> Encode.optional input____.stddev_samp ), ( "sum", encodeTodo_sum_order_by |> Encode.optional input____.sum ), ( "var_pop", encodeTodo_var_pop_order_by |> Encode.optional input____.var_pop ), ( "var_samp", encodeTodo_var_samp_order_by |> Encode.optional input____.var_samp ), ( "variance", encodeTodo_variance_order_by |> Encode.optional input____.variance ) ]


buildTodo_avg_order_by :
    (Todo_avg_order_byOptionalFields -> Todo_avg_order_byOptionalFields)
    -> Todo_avg_order_by
buildTodo_avg_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_avg_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_avg\_order\_by input object.
-}
type alias Todo_avg_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_avg\_order\_by into a value that can be used as an argument.
-}
encodeTodo_avg_order_by : Todo_avg_order_by -> Value
encodeTodo_avg_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_bool_exp :
    (Todo_bool_expOptionalFields -> Todo_bool_expOptionalFields)
    -> Todo_bool_exp
buildTodo_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, id = Absent, name = Absent, user = Absent, user_id = Absent }
    in
    Todo_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, id = optionals____.id, name = optionals____.name, user = optionals____.user, user_id = optionals____.user_id }


type alias Todo_bool_expOptionalFields =
    { and_ : OptionalArgument (List Todo_bool_exp)
    , not_ : OptionalArgument Todo_bool_exp
    , or_ : OptionalArgument (List Todo_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , name : OptionalArgument String_comparison_exp
    , user : OptionalArgument User_bool_exp
    , user_id : OptionalArgument Int_comparison_exp
    }


{-| Type alias for the `Todo_bool_exp` attributes. Note that this type
needs to use the `Todo_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Todo_bool_expRaw =
    { and_ : OptionalArgument (List Todo_bool_exp)
    , not_ : OptionalArgument Todo_bool_exp
    , or_ : OptionalArgument (List Todo_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , name : OptionalArgument String_comparison_exp
    , user : OptionalArgument User_bool_exp
    , user_id : OptionalArgument Int_comparison_exp
    }


{-| Type for the Todo\_bool\_exp input object.
-}
type Todo_bool_exp
    = Todo_bool_exp Todo_bool_expRaw


{-| Encode a Todo\_bool\_exp into a value that can be used as an argument.
-}
encodeTodo_bool_exp : Todo_bool_exp -> Value
encodeTodo_bool_exp (Todo_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeTodo_bool_exp |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeTodo_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeTodo_bool_exp |> Encode.list) |> Encode.optional input____.or_ ), ( "id", encodeInt_comparison_exp |> Encode.optional input____.id ), ( "name", encodeString_comparison_exp |> Encode.optional input____.name ), ( "user", encodeUser_bool_exp |> Encode.optional input____.user ), ( "user_id", encodeInt_comparison_exp |> Encode.optional input____.user_id ) ]


buildTodo_insert_input :
    (Todo_insert_inputOptionalFields -> Todo_insert_inputOptionalFields)
    -> Todo_insert_input
buildTodo_insert_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, user_id = Absent }
    in
    { id = optionals____.id, name = optionals____.name, user_id = optionals____.user_id }


type alias Todo_insert_inputOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , user_id : OptionalArgument Int
    }


{-| Type for the Todo\_insert\_input input object.
-}
type alias Todo_insert_input =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , user_id : OptionalArgument Int
    }


{-| Encode a Todo\_insert\_input into a value that can be used as an argument.
-}
encodeTodo_insert_input : Todo_insert_input -> Value
encodeTodo_insert_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "name", Encode.string |> Encode.optional input____.name ), ( "user_id", Encode.int |> Encode.optional input____.user_id ) ]


buildTodo_max_order_by :
    (Todo_max_order_byOptionalFields -> Todo_max_order_byOptionalFields)
    -> Todo_max_order_by
buildTodo_max_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, user_id = Absent }
    in
    { id = optionals____.id, name = optionals____.name, user_id = optionals____.user_id }


type alias Todo_max_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_max\_order\_by input object.
-}
type alias Todo_max_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_max\_order\_by into a value that can be used as an argument.
-}
encodeTodo_max_order_by : Todo_max_order_by -> Value
encodeTodo_max_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "name", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.name ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_min_order_by :
    (Todo_min_order_byOptionalFields -> Todo_min_order_byOptionalFields)
    -> Todo_min_order_by
buildTodo_min_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, user_id = Absent }
    in
    { id = optionals____.id, name = optionals____.name, user_id = optionals____.user_id }


type alias Todo_min_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_min\_order\_by input object.
-}
type alias Todo_min_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_min\_order\_by into a value that can be used as an argument.
-}
encodeTodo_min_order_by : Todo_min_order_by -> Value
encodeTodo_min_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "name", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.name ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_on_conflict :
    Todo_on_conflictRequiredFields
    -> (Todo_on_conflictOptionalFields -> Todo_on_conflictOptionalFields)
    -> Todo_on_conflict
buildTodo_on_conflict required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { where_ = Absent }
    in
    Todo_on_conflict { constraint = required____.constraint, update_columns = required____.update_columns, where_ = optionals____.where_ }


type alias Todo_on_conflictRequiredFields =
    { constraint : BackendAPI.Enum.Todo_constraint.Todo_constraint
    , update_columns : List BackendAPI.Enum.Todo_update_column.Todo_update_column
    }


type alias Todo_on_conflictOptionalFields =
    { where_ : OptionalArgument Todo_bool_exp }


{-| Type alias for the `Todo_on_conflict` attributes. Note that this type
needs to use the `Todo_on_conflict` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Todo_on_conflictRaw =
    { constraint : BackendAPI.Enum.Todo_constraint.Todo_constraint
    , update_columns : List BackendAPI.Enum.Todo_update_column.Todo_update_column
    , where_ : OptionalArgument Todo_bool_exp
    }


{-| Type for the Todo\_on\_conflict input object.
-}
type Todo_on_conflict
    = Todo_on_conflict Todo_on_conflictRaw


{-| Encode a Todo\_on\_conflict into a value that can be used as an argument.
-}
encodeTodo_on_conflict : Todo_on_conflict -> Value
encodeTodo_on_conflict (Todo_on_conflict input____) =
    Encode.maybeObject
        [ ( "constraint", Encode.enum BackendAPI.Enum.Todo_constraint.toString input____.constraint |> Just ), ( "update_columns", (Encode.enum BackendAPI.Enum.Todo_update_column.toString |> Encode.list) input____.update_columns |> Just ), ( "where", encodeTodo_bool_exp |> Encode.optional input____.where_ ) ]


buildTodo_order_by :
    (Todo_order_byOptionalFields -> Todo_order_byOptionalFields)
    -> Todo_order_by
buildTodo_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent, user = Absent, user_id = Absent }
    in
    { id = optionals____.id, name = optionals____.name, user = optionals____.user, user_id = optionals____.user_id }


type alias Todo_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user : OptionalArgument User_order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_order\_by input object.
-}
type alias Todo_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , name : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user : OptionalArgument User_order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_order\_by into a value that can be used as an argument.
-}
encodeTodo_order_by : Todo_order_by -> Value
encodeTodo_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "name", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.name ), ( "user", encodeUser_order_by |> Encode.optional input____.user ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_pk_columns_input :
    Todo_pk_columns_inputRequiredFields
    -> Todo_pk_columns_input
buildTodo_pk_columns_input required____ =
    { id = required____.id }


type alias Todo_pk_columns_inputRequiredFields =
    { id : Int }


{-| Type for the Todo\_pk\_columns\_input input object.
-}
type alias Todo_pk_columns_input =
    { id : Int }


{-| Encode a Todo\_pk\_columns\_input into a value that can be used as an argument.
-}
encodeTodo_pk_columns_input : Todo_pk_columns_input -> Value
encodeTodo_pk_columns_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int input____.id |> Just ) ]


buildTodo_set_input :
    (Todo_set_inputOptionalFields -> Todo_set_inputOptionalFields)
    -> Todo_set_input
buildTodo_set_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent }
    in
    { name = optionals____.name }


type alias Todo_set_inputOptionalFields =
    { name : OptionalArgument String }


{-| Type for the Todo\_set\_input input object.
-}
type alias Todo_set_input =
    { name : OptionalArgument String }


{-| Encode a Todo\_set\_input into a value that can be used as an argument.
-}
encodeTodo_set_input : Todo_set_input -> Value
encodeTodo_set_input input____ =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input____.name ) ]


buildTodo_stddev_order_by :
    (Todo_stddev_order_byOptionalFields -> Todo_stddev_order_byOptionalFields)
    -> Todo_stddev_order_by
buildTodo_stddev_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_stddev_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_stddev\_order\_by input object.
-}
type alias Todo_stddev_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_stddev\_order\_by into a value that can be used as an argument.
-}
encodeTodo_stddev_order_by : Todo_stddev_order_by -> Value
encodeTodo_stddev_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_stddev_pop_order_by :
    (Todo_stddev_pop_order_byOptionalFields -> Todo_stddev_pop_order_byOptionalFields)
    -> Todo_stddev_pop_order_by
buildTodo_stddev_pop_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_stddev_pop_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_stddev\_pop\_order\_by input object.
-}
type alias Todo_stddev_pop_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_stddev\_pop\_order\_by into a value that can be used as an argument.
-}
encodeTodo_stddev_pop_order_by : Todo_stddev_pop_order_by -> Value
encodeTodo_stddev_pop_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_stddev_samp_order_by :
    (Todo_stddev_samp_order_byOptionalFields -> Todo_stddev_samp_order_byOptionalFields)
    -> Todo_stddev_samp_order_by
buildTodo_stddev_samp_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_stddev_samp_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_stddev\_samp\_order\_by input object.
-}
type alias Todo_stddev_samp_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_stddev\_samp\_order\_by into a value that can be used as an argument.
-}
encodeTodo_stddev_samp_order_by : Todo_stddev_samp_order_by -> Value
encodeTodo_stddev_samp_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_sum_order_by :
    (Todo_sum_order_byOptionalFields -> Todo_sum_order_byOptionalFields)
    -> Todo_sum_order_by
buildTodo_sum_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_sum_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_sum\_order\_by input object.
-}
type alias Todo_sum_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_sum\_order\_by into a value that can be used as an argument.
-}
encodeTodo_sum_order_by : Todo_sum_order_by -> Value
encodeTodo_sum_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_var_pop_order_by :
    (Todo_var_pop_order_byOptionalFields -> Todo_var_pop_order_byOptionalFields)
    -> Todo_var_pop_order_by
buildTodo_var_pop_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_var_pop_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_var\_pop\_order\_by input object.
-}
type alias Todo_var_pop_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_var\_pop\_order\_by into a value that can be used as an argument.
-}
encodeTodo_var_pop_order_by : Todo_var_pop_order_by -> Value
encodeTodo_var_pop_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_var_samp_order_by :
    (Todo_var_samp_order_byOptionalFields -> Todo_var_samp_order_byOptionalFields)
    -> Todo_var_samp_order_by
buildTodo_var_samp_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_var_samp_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_var\_samp\_order\_by input object.
-}
type alias Todo_var_samp_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_var\_samp\_order\_by into a value that can be used as an argument.
-}
encodeTodo_var_samp_order_by : Todo_var_samp_order_by -> Value
encodeTodo_var_samp_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildTodo_variance_order_by :
    (Todo_variance_order_byOptionalFields -> Todo_variance_order_byOptionalFields)
    -> Todo_variance_order_by
buildTodo_variance_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, user_id = Absent }
    in
    { id = optionals____.id, user_id = optionals____.user_id }


type alias Todo_variance_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the Todo\_variance\_order\_by input object.
-}
type alias Todo_variance_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , user_id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a Todo\_variance\_order\_by into a value that can be used as an argument.
-}
encodeTodo_variance_order_by : Todo_variance_order_by -> Value
encodeTodo_variance_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "user_id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.user_id ) ]


buildUser_bool_exp :
    (User_bool_expOptionalFields -> User_bool_expOptionalFields)
    -> User_bool_exp
buildUser_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, id = Absent, todos = Absent, username = Absent }
    in
    User_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, id = optionals____.id, todos = optionals____.todos, username = optionals____.username }


type alias User_bool_expOptionalFields =
    { and_ : OptionalArgument (List User_bool_exp)
    , not_ : OptionalArgument User_bool_exp
    , or_ : OptionalArgument (List User_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , todos : OptionalArgument Todo_bool_exp
    , username : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `User_bool_exp` attributes. Note that this type
needs to use the `User_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias User_bool_expRaw =
    { and_ : OptionalArgument (List User_bool_exp)
    , not_ : OptionalArgument User_bool_exp
    , or_ : OptionalArgument (List User_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , todos : OptionalArgument Todo_bool_exp
    , username : OptionalArgument String_comparison_exp
    }


{-| Type for the User\_bool\_exp input object.
-}
type User_bool_exp
    = User_bool_exp User_bool_expRaw


{-| Encode a User\_bool\_exp into a value that can be used as an argument.
-}
encodeUser_bool_exp : User_bool_exp -> Value
encodeUser_bool_exp (User_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeUser_bool_exp |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeUser_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeUser_bool_exp |> Encode.list) |> Encode.optional input____.or_ ), ( "id", encodeInt_comparison_exp |> Encode.optional input____.id ), ( "todos", encodeTodo_bool_exp |> Encode.optional input____.todos ), ( "username", encodeString_comparison_exp |> Encode.optional input____.username ) ]


buildUser_order_by :
    (User_order_byOptionalFields -> User_order_byOptionalFields)
    -> User_order_by
buildUser_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, todos_aggregate = Absent, username = Absent }
    in
    { id = optionals____.id, todos_aggregate = optionals____.todos_aggregate, username = optionals____.username }


type alias User_order_byOptionalFields =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , todos_aggregate : OptionalArgument Todo_aggregate_order_by
    , username : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Type for the User\_order\_by input object.
-}
type alias User_order_by =
    { id : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    , todos_aggregate : OptionalArgument Todo_aggregate_order_by
    , username : OptionalArgument BackendAPI.Enum.Order_by.Order_by
    }


{-| Encode a User\_order\_by into a value that can be used as an argument.
-}
encodeUser_order_by : User_order_by -> Value
encodeUser_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.id ), ( "todos_aggregate", encodeTodo_aggregate_order_by |> Encode.optional input____.todos_aggregate ), ( "username", Encode.enum BackendAPI.Enum.Order_by.toString |> Encode.optional input____.username ) ]
