-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BackendAPI.Enum.Todo_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "todo"

  - Completed - column name
  - Created\_at - column name
  - Id - column name
  - Name - column name
  - Updated\_at - column name
  - User\_id - column name

-}
type Todo_select_column
    = Completed
    | Created_at
    | Id
    | Name
    | Updated_at
    | User_id


list : List Todo_select_column
list =
    [ Completed, Created_at, Id, Name, Updated_at, User_id ]


decoder : Decoder Todo_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "completed" ->
                        Decode.succeed Completed

                    "created_at" ->
                        Decode.succeed Created_at

                    "id" ->
                        Decode.succeed Id

                    "name" ->
                        Decode.succeed Name

                    "updated_at" ->
                        Decode.succeed Updated_at

                    "user_id" ->
                        Decode.succeed User_id

                    _ ->
                        Decode.fail ("Invalid Todo_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Todo_select_column -> String
toString enum____ =
    case enum____ of
        Completed ->
            "completed"

        Created_at ->
            "created_at"

        Id ->
            "id"

        Name ->
            "name"

        Updated_at ->
            "updated_at"

        User_id ->
            "user_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Todo_select_column
fromString enumString____ =
    case enumString____ of
        "completed" ->
            Just Completed

        "created_at" ->
            Just Created_at

        "id" ->
            Just Id

        "name" ->
            Just Name

        "updated_at" ->
            Just Updated_at

        "user_id" ->
            Just User_id

        _ ->
            Nothing
