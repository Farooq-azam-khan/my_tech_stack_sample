-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BackendAPI.Mutation exposing (..)

import BackendAPI.InputObject
import BackendAPI.Interface
import BackendAPI.Object
import BackendAPI.Scalar
import BackendAPI.ScalarCodecs
import BackendAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias DeleteTodoRequiredArguments =
    { where_ : BackendAPI.InputObject.Todo_bool_exp }


{-| delete data from the table: "todo"

  - where\_ - filter the rows which have to be deleted

-}
delete_todo :
    DeleteTodoRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
delete_todo requiredArgs____ object____ =
    Object.selectionForCompositeField "delete_todo" [ Argument.required "where" requiredArgs____.where_ BackendAPI.InputObject.encodeTodo_bool_exp ] object____ (Basics.identity >> Decode.nullable)


type alias DeleteTodoByPkRequiredArguments =
    { id : Int }


{-| delete single row from the table: "todo"
-}
delete_todo_by_pk :
    DeleteTodoByPkRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootMutation
delete_todo_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "delete_todo_by_pk" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias InsertTodoOptionalArguments =
    { on_conflict : OptionalArgument BackendAPI.InputObject.Todo_on_conflict }


type alias InsertTodoRequiredArguments =
    { objects : List BackendAPI.InputObject.Todo_insert_input }


{-| insert data into the table: "todo"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_todo :
    (InsertTodoOptionalArguments -> InsertTodoOptionalArguments)
    -> InsertTodoRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
insert_todo fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { on_conflict = Absent }

        optionalArgs____ =
            [ Argument.optional "on_conflict" filledInOptionals____.on_conflict BackendAPI.InputObject.encodeTodo_on_conflict ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "insert_todo" (optionalArgs____ ++ [ Argument.required "objects" requiredArgs____.objects (BackendAPI.InputObject.encodeTodo_insert_input |> Encode.list) ]) object____ (Basics.identity >> Decode.nullable)


type alias InsertTodoOneOptionalArguments =
    { on_conflict : OptionalArgument BackendAPI.InputObject.Todo_on_conflict }


type alias InsertTodoOneRequiredArguments =
    { object : BackendAPI.InputObject.Todo_insert_input }


{-| insert a single row into the table: "todo"

  - object - the row to be inserted
  - on\_conflict - on conflict condition

-}
insert_todo_one :
    (InsertTodoOneOptionalArguments -> InsertTodoOneOptionalArguments)
    -> InsertTodoOneRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootMutation
insert_todo_one fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { on_conflict = Absent }

        optionalArgs____ =
            [ Argument.optional "on_conflict" filledInOptionals____.on_conflict BackendAPI.InputObject.encodeTodo_on_conflict ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "insert_todo_one" (optionalArgs____ ++ [ Argument.required "object" requiredArgs____.object BackendAPI.InputObject.encodeTodo_insert_input ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateTodoOptionalArguments =
    { set_ : OptionalArgument BackendAPI.InputObject.Todo_set_input }


type alias UpdateTodoRequiredArguments =
    { where_ : BackendAPI.InputObject.Todo_bool_exp }


{-| update data of the table: "todo"

  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_todo :
    (UpdateTodoOptionalArguments -> UpdateTodoOptionalArguments)
    -> UpdateTodoRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo_mutation_response
    -> SelectionSet (Maybe decodesTo) RootMutation
update_todo fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { set_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_set" filledInOptionals____.set_ BackendAPI.InputObject.encodeTodo_set_input ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "update_todo" (optionalArgs____ ++ [ Argument.required "where" requiredArgs____.where_ BackendAPI.InputObject.encodeTodo_bool_exp ]) object____ (Basics.identity >> Decode.nullable)


type alias UpdateTodoByPkOptionalArguments =
    { set_ : OptionalArgument BackendAPI.InputObject.Todo_set_input }


type alias UpdateTodoByPkRequiredArguments =
    { pk_columns : BackendAPI.InputObject.Todo_pk_columns_input }


{-| update single row of the table: "todo"

  - set\_ - sets the columns of the filtered rows to the given values

-}
update_todo_by_pk :
    (UpdateTodoByPkOptionalArguments -> UpdateTodoByPkOptionalArguments)
    -> UpdateTodoByPkRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootMutation
update_todo_by_pk fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { set_ = Absent }

        optionalArgs____ =
            [ Argument.optional "_set" filledInOptionals____.set_ BackendAPI.InputObject.encodeTodo_set_input ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "update_todo_by_pk" (optionalArgs____ ++ [ Argument.required "pk_columns" requiredArgs____.pk_columns BackendAPI.InputObject.encodeTodo_pk_columns_input ]) object____ (Basics.identity >> Decode.nullable)
