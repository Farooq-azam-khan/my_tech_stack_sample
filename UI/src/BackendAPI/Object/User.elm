-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BackendAPI.Object.User exposing (..)

import BackendAPI.Enum.Todo_select_column
import BackendAPI.InputObject
import BackendAPI.Interface
import BackendAPI.Object
import BackendAPI.Scalar
import BackendAPI.ScalarCodecs
import BackendAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Int BackendAPI.Object.User
id =
    Object.selectionForField "Int" "id" [] Decode.int


type alias TodosOptionalArguments =
    { distinct_on : OptionalArgument (List BackendAPI.Enum.Todo_select_column.Todo_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List BackendAPI.InputObject.Todo_order_by)
    , where_ : OptionalArgument BackendAPI.InputObject.Todo_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
todos :
    (TodosOptionalArguments -> TodosOptionalArguments)
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (List decodesTo) BackendAPI.Object.User
todos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum BackendAPI.Enum.Todo_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (BackendAPI.InputObject.encodeTodo_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ BackendAPI.InputObject.encodeTodo_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "todos" optionalArgs____ object____ (Basics.identity >> Decode.list)


username : SelectionSet String BackendAPI.Object.User
username =
    Object.selectionForField "String" "username" [] Decode.string
