-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module BackendAPI.Subscription exposing (..)

import BackendAPI.Enum.Todo_select_column
import BackendAPI.Enum.User_select_column
import BackendAPI.InputObject
import BackendAPI.Interface
import BackendAPI.Object
import BackendAPI.Scalar
import BackendAPI.ScalarCodecs
import BackendAPI.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias TodoOptionalArguments =
    { distinct_on : OptionalArgument (List BackendAPI.Enum.Todo_select_column.Todo_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List BackendAPI.InputObject.Todo_order_by)
    , where_ : OptionalArgument BackendAPI.InputObject.Todo_bool_exp
    }


{-| fetch data from the table: "todo"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
todo :
    (TodoOptionalArguments -> TodoOptionalArguments)
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (List decodesTo) RootSubscription
todo fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum BackendAPI.Enum.Todo_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (BackendAPI.InputObject.encodeTodo_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ BackendAPI.InputObject.encodeTodo_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "todo" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias TodoByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "todo" using primary key columns
-}
todo_by_pk :
    TodoByPkRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootSubscription
todo_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "todo_by_pk" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias UserOptionalArguments =
    { distinct_on : OptionalArgument (List BackendAPI.Enum.User_select_column.User_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List BackendAPI.InputObject.User_order_by)
    , where_ : OptionalArgument BackendAPI.InputObject.User_bool_exp
    }


{-| fetch data from the table: "user"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
user :
    (UserOptionalArguments -> UserOptionalArguments)
    -> SelectionSet decodesTo BackendAPI.Object.User
    -> SelectionSet (List decodesTo) RootSubscription
user fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum BackendAPI.Enum.User_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (BackendAPI.InputObject.encodeUser_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ BackendAPI.InputObject.encodeUser_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "user" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias UserByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "user" using primary key columns
-}
user_by_pk :
    UserByPkRequiredArguments
    -> SelectionSet decodesTo BackendAPI.Object.User
    -> SelectionSet (Maybe decodesTo) RootSubscription
user_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "user_by_pk" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)
